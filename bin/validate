use v5.14;

use Data::Rx;
use Mojo::File;
use Mojo::JSON;

package Reindeer::YYYYMMDD {
	use parent 'Data::Rx::CommonType::EasyNew';

	sub type_uri {
		'tag:example.com,EXAMPLE:rx/reindeer-date',
		}

	sub assert_valid {
		my ($self, $value) = @_;
		return 1 unless defined $value;
		$value =~ /\A(?:\d\d\d\d)-\d\d-\d\d\z/a or $self->fail({
			error => [ qw(type) ],
			message => "date value is not YYYY-MM-DD",
			value => $value,
			})
		}
	}

my $record = {
	type     => '//rec',
	required => {
		name       => { type => '//str' },
		start_date => { type => 'tag:example.com,EXAMPLE:rx/reindeer-date' },
		},
	optional => {
		aliases => {
			type => '//arr',
			contents => '//str'
			}
		},
	};

my $rx = Data::Rx->new({
  type_plugins => [qw(
    Reindeer::YYYYMMDD
  )],	});

my $schema = $rx->make_schema($record);

foreach my $file ( sort @ARGV ) {
	say "Checking $file";

	my $data = eval { Mojo::JSON::decode_json( Mojo::File->new($file)->slurp ) };
	unless( $data ) {
		my $error = $@ =~ s/\.^/\n/gmr;
		say "\tCould not read <$file>: $error";
		next;
		}

	eval { $schema->assert_valid($data) };
	my $at = $@;
	next unless length $at;

	foreach my $failure ( @{ $at->failures } ) {
		say "\t$failure";
		}
	};
